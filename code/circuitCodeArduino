// include the library code:
#include <LiquidCrystal.h>
#include <DHT.h>

// Wi-Fi credentials
String ssid     = "Simulator Wifi";  // SSID to connect to
String password = "";                // virtual wifi has no password

// ThingSpeak details
String host     = "api.thingspeak.com";
const int httpPort   = 80;
String apiKey   = "YS1VTTDPFVKTT0G0";  // Replace with your ThingSpeak Write API key

// Construct the base URL for multiple fields
// Fields mapping:
// field1 = Distance (cm)
// field2 = Light Level (LDR)
// field3 = Gas Sensor Value
// field4 = Motion (PIR)
String baseUrl  = "/update?api_key=" + apiKey;

// initialize the library with the numbers of the interface pins
LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

// Pin where the DHT sensor is connected
#define DHTPIN A2

// DHT11 sensor type
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);
float temperature = 0.0;
float humidity = 0.0;

// Previous values to avoid redundant sending
float prevTemp = -1.0;
float prevHumidity = -1.0;


// For ultrasound sensor
int distanceThreshold = 0;
int cm = 0;
int inches = 0;

// for Relay Control
int releNO = 13;
int inputPir = 8;
int pirMotion = 0; // Rename 'val' to 'pirMotion' for clarity
int ldrValue; 
int sensorLDR = A0;

// For Gas sensor
int const PINO_SGAS = A1;
int gasValue;

// Previous sensor values (optional, if you want to send only on change)
int prevCM = -1;
int prevLDR = -1;
int prevGas = -1;
int prevPIR = -1;

long readUltrasonicDistance(int triggerPin, int echoPin) {
  pinMode(triggerPin, OUTPUT);  // Clear the trigger
  digitalWrite(triggerPin, LOW);
  delayMicroseconds(2);
  // Sets the trigger pin HIGH for 10 microseconds
  digitalWrite(triggerPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(triggerPin, LOW);
  pinMode(echoPin, INPUT);
  // Reads the echo pin and returns the sound wave travel time in microseconds
  return pulseIn(echoPin, HIGH);
}

int setupESP8266(void) {
  // Start ESP8266 Serial Communication
  Serial.begin(115200);
  delay(2000); // Give ESP time to reset
  
  Serial.println("AT");
  if (!waitForResponse("OK", 5000)) return 1;
  
  // Connect to WiFi
  Serial.println("AT+CWJAP=\"" + ssid + "\",\"" + password + "\"");
  if (!waitForResponse("OK", 10000)) return 2;
  
  // Open TCP connection to ThingSpeak
  Serial.println("AT+CIPSTART=\"TCP\",\"" + host + "\"," + String(httpPort));
  if (!waitForResponse("OK", 5000)) return 3;
  
  return 0;
}

// Helper function to wait for a specific response from the ESP8266
bool waitForResponse(String target, unsigned long timeout) {
  unsigned long start = millis();
  String response = "";
  while (millis() - start < timeout) {
    while (Serial.available()) {
      char c = (char)Serial.read();
      response += c;
      if (response.indexOf(target) != -1) {
        return true;
      }
    }
  }
  return false;
}

void sendDataToThingSpeak(int distanceCM, int lightLevel, int gasVal, int motion) {
  // Construct the full HTTP request with multiple fields
  // field1 = Distance (cm)
  // field2 = Light Level (LDR)
  // field3 = Gas Sensor Value
  // field4 = Motion (PIR)
  // field5 = Temperature (Â°C)
  // field6 = Humidity (%)
  String url = baseUrl 
               + "&field1=" + String(distanceCM)
               + "&field2=" + String(lightLevel)
               + "&field3=" + String(gasVal)
               + "&field4=" + String(motion)
               + "&field5=" + String(temperature)
               + "&field6=" + String(humidity);

  // Construct the HTTP GET request packet
  String httpPacket = "GET " + url + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n";
  int length = httpPacket.length();
  
  // Send message length first
  Serial.print("AT+CIPSEND=");
  Serial.println(length);
  if (!waitForResponse(">", 5000)) {
    Serial.println("No '>' prompt from ESP");
    return;
  }

  // Send the HTTP request
  Serial.print(httpPacket);
  
  if (waitForResponse("SEND OK", 5000)) {
    Serial.println("Data sent to ThingSpeak!");
  } else {
    Serial.println("Failed to send data");
  }
}


void setup() {
  // Setup LCD
  lcd.begin(16, 2);
  
  pinMode(releNO, OUTPUT);
  pinMode(inputPir, INPUT);
  pinMode(sensorLDR, INPUT);
  pinMode(PINO_SGAS, INPUT);

  // Setup ESP8266
  int result = setupESP8266();
  if (result != 0) {
    Serial.println("ESP8266 setup failed with code: " + String(result));
  }
}

void loop() {
  // Set threshold distance to activate LEDs
  distanceThreshold = 350;
  
  // Measure the distance
  cm = 0.01723 * readUltrasonicDistance(7, 6);
  
  // Read PIR sensor for motion
  pirMotion = digitalRead(inputPir);
  
  // Read LDR sensor for light level
  ldrValue = analogRead(sensorLDR);
  
  // Read Gas sensor value
  gasValue = analogRead(PINO_SGAS);

  // Print distance to LCD
  lcd.setCursor(0,0); 
  lcd.print("D:");
  lcd.print(cm);
  lcd.print("cm   ");

  // Control relay based on LDR and PIR
  if(ldrValue < 600) {
    if(pirMotion == HIGH) {
      digitalWrite(releNO, HIGH);
      lcd.setCursor(0,1);
      lcd.print("L: On  ");
      delay(5000);
    } else {
      digitalWrite(releNO, LOW);
      lcd.setCursor(0,1);
      lcd.print("L: Off ");
      delay(300);
    }
  } else {
    digitalWrite(releNO, LOW);
    lcd.setCursor(0,1);
    lcd.print("L: Off ");
    delay(500);
  }

  // Display Gas status on LCD
  lcd.setCursor(8,0);
  if(gasValue <= 85){
    lcd.print("G:Low ");
  } else if(gasValue <= 120){
    lcd.print("G:Med ");
  } else if(gasValue <= 200){
    lcd.print("G:High");
  } else if(gasValue <= 300){
    lcd.print("G:Ext ");
  } else {
    lcd.print("G:----");
  }

  // Read temperature and humidity
  temperature = dht.readTemperature();
  humidity = dht.readHumidity();

  // Check if readings are valid
  if (isnan(temperature) || isnan(humidity)) {
    lcd.setCursor(0, 1);
    lcd.print("DHT Error  ");
  } else {
    // Display temperature and humidity on the LCD
    lcd.setCursor(8, 1);
    lcd.print("T:");
    lcd.print(temperature);
    lcd.print("C ");

    lcd.setCursor(0, 1);
    lcd.print("H:");
    lcd.print(humidity);
    lcd.print("% ");
  }


  // Send data to ThingSpeak (Distance, Light, Gas, PIR)
  sendDataToThingSpeak(cm, ldrValue, gasValue, pirMotion);

  delay(5000); // Wait a bit before next update
}
